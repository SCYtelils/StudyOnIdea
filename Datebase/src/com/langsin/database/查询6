#进阶6：连续查询
/*
含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询

笛卡尔乘积现象：表1 有m行， 表2有n行，结果=m*n行

发生原因：没有有效的连接条件
如何避免：添加有效的连接条件

分类：
			按年代分类
			sql192标准：仅仅支持内连接
			sql199标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接

			按功能分类：
						内连接：
										等值连接
										非等值连接
										自连接
						外连接：
										左外连接
										右外连接
										全外连接
						交叉连接

*/

SELECT NAME,boyName FROM boys,beauty
WHERE beauty.boyfriend_id = boys.id;

#一、sql192标准
#1.等值连接
/*
①多表等值连接的结果为多表的交集部分
②n表连接，至少需要n-1个连接条件
③多表的顺序没有要求
④一般需要为表起别名
⑤可以搭配前面介绍的所有子句使用，比如排序、分组、筛选
*/

#案例一：查询女神名和对应的男神名
SELECT name,boyName FROM boys,beauty
where beauty.boyfriend_id = boys.id;

#案例2：查询员工名和对应的部门名
SELECT last_name,department_name
FROM employees,departments
where employees.department_id = departments.department_id;

#2.为表起别名
/*
①提高语句的简洁度
②区分多个重名的字段

注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定

*/
#查询员工名、工种号、工种名
SELECT last_name,e.job_id,job_title
FROM employees e,jobs j
WHERE e.`job_id` = j.`job_id`;

#3.两个表的顺序是否可以调换

#查询员工名、工种号、工种名
SELECT last_name,e.job_id,job_title
FROM jobs j,employees e
WHERE e.`job_id` = j.`job_id`;

#4.可以加筛选？

#案例：查询有奖金的员工名、部门名
SELECT last_name,department_name,commission_pct
FROM employees e, departments d
WHERE e.department_id = d.department_id
AND e.commission_pct IS NOT NULL;

#案例2：查询城市名中第二个字符为o的部门名和城市名
SELECT department_name,city
FROM locations l,departments d
WHERE d.location_id=l.location_id
AND city LIKE '_o%';

#5.可以加分组？
#案例1：查询每个城市的部门个数
SELECT COUNT(*) 个数,city
FROM departments d,locations l
WHERE d.location_id = l.location_id
GROUP BY city;

#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资
SELECT department_name,d.manager_id,MIN(salary)
FROM departments d,employees e
WHERE d.department_id = e.department_id
AND commission_pct IS NOT NULL
GROUP BY department_name,d.manager_id;

#6.可以加排序
#案例：查询每个工种的工种名和员工的个数，并且按员工个数降序

SELECT job_title,COUNT(*)
FROM employees e,jobs j
WHERE e.job_id = j.job_id
GROUP BY job_title
ORDER BY COUNT(*) DESC;

#7.可以实现三表连接？

#案例：查询员工名、部门名和所在城市

SELECT last_name,department_name,city
FROM employees e,departments d,locations l
WHERE e.department_id = d.department_id
AND d.location_id = l.location_id;


#2.非等值连接

#案例1：查询员工的工资的工资级别
SELECT last_name,salary,grade_level
FROM employees e,job_grades g
WHERE salary BETWEEN g.lowest_sal AND g.highest_sal;

#3.自连接

#案例：查询员工名和上级的名称
SELECT e.employee_id,e.last_name,m.employee_id,m.last_name
FROM employees e,employees m;
WHERE e.manager_id = m.employee_id;

#员工工资级别
CREATE TABLE job_grades
(grade_level VARCHAR(3),
lowest_sal INT,
highest_sal INT);

INSERT INTO job_grades
VALUE ('A',1000,2999);

INSERT INTO job_grades
VALUE ('B',3000,5999);

INSERT INTO job_grades
VALUE ('C',6000,9999);

INSERT INTO job_grades
VALUE ('D',10000,14999);

INSERT INTO job_grades
VALUE ('E',15000,24999);

INSERT INTO job_grades
VALUE ('F',25000,40000);

#二、sql199语法
/*
语法：
			SELECT 查询列表
			FROM 表1 别名 【连接类型】
			JOIN 表2 别名
			ON 连接条件
			【WHERE 筛选条件】
			【GROUP BY 分组】
			【HAVING 筛选条件】
			【ORDER BY 排序列表】

内连接：inner
外连接
				左外：left【outer】
				右外：right【outer】
				全外：full【outer】
交叉连接：cross
*/

#一）内连接
/*
语法：

SELECT 查询列表
FROM 表1 别名
INNER JOIN 表2 别名
ON 连接条件

分类：
等值
非等值
自连接

特点：
①添加排序、分组、筛选
②inner可以省略
③筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读
④inner join连接和sql192语法中的等值连接效果是一样的，都是查询多表的交集
*/

1.等值连接
#案例1.查询员工名、部门名

SELECT last_name,department_name
FROM employees e
INNER JOIN departments d
ON e.department_id = d.department_id;

#案例2：查询名字中包含e的员工名和工种名（添加筛选）
SELECT last_name,job_title
FROM employees e
INNER JOIN jobs j
ON e.job_id = j.job_id
WHERE e.last_name LIKE "%e%";

#案例3.查询部门个数>3的城市名和部门个数（添加分组+筛选）
SELECT city,COUNT(*) 部门个数
FROM departments d
INNER JOIN locations l
ON d.location_id=l.location_id
GROUP BY city
HAVING COUNT(*)>3;

#案例4：查询哪个部门的员工个数>3的部门名和员工个数，并按个数降序（添加排序）
SELECT department_name,COUNT(*)
FROM departments d
INNER JOIN employees e
ON e.department_id = d.department_id
GROUP BY department_name
HAVING COUNT(*)>3
ORDER BY COUNT(*) DESC;

#5.查询员工名、部门名、工种名，并按部门名降序（三表联查）
SELECT last_name,department_name,job_title
FROM employees e
INNER JOIN departments d ON e.department_id = d.department_id
INNER JOIN jobs j ON e.job_id = j.job_id
ORDER BY department_name DESC;

#二）非等值连接

#查询员工的工资级别
SELECT salary,grade_level
FROM employees e
 JOIN job_grades g
ON e.salary BETWEEN g.lowest_sal AND g.highest_sal;

#查询工资级别的个数>20的个数，并且按工资级别降序
SELECT COUNT(*),grade_level
FROM employees e
JOIN job_grades g
ON e.salary BETWEEN g.lowest_sal AND g.highest_sal
GROUP BY grade_level
HAVING COUNT(*)>20
ORDER BY grade_level DESC;

#三）自连接

#查询员工的名字、上级的名字
SELECT e.last_name,m.last_name
FROM employees e
JOIN employees m
ON e.manager_id = m.employee_id;

#查询姓名中包含字符k的员工的名字、上级的名字
SELECT e.last_name,m.last_name
FROM employees e
JOIN employees m
ON e.manager_id = m.employee_id
WHERE e.last_name LIKE '%k%';

#二、外连接
/*
应用场景：用于查询一个表中有，另一个表没有的记录

特点：
1.外连接的查询结果为主表的所有记录
		如果从表中有和它匹配的，则显示匹配的值
    如果从表中没有和它匹配的，则显示null
		外连接查询结果=内连接结果+主表中有而从表中没有的记录

2.左外连接，left join左边的为主表
	右外连接，right join右边的是主表
3.左外和右外交换两个表的顺序，可以实现同样的效果
4.全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的
*/
#引入：查询没有男朋友的女神名（查询男朋友 不在男神表的女神名）
USE girls;
use myemployees;
#左外连接：
SELECT b.name,bo.*
FROM beauty b
LEFT OUTER JOIN boys bo
ON b.boyfriend_id = bo.id
WHERE bo.id is NULL;

#右外连接：
SELECT b.name,bo.*
FROM boys bo
RIGHT OUTER JOIN beauty b
ON b.boyfriend_id = bo.id
WHERE bo.id is NULL;

#案例1：查询哪个部门没有员工
#左外
SELECT d.*,e.employee_id
FROM departments d
LEFT OUTER JOIN employees e
ON d.department_id = e.department_id
WHERE e.employee_id IS NULL;
#右外
SELECT d.*,e.employee_id
FROM employees e
RIGHT OUTER JOIN departments d
ON d.department_id = e.department_id
WHERE e.employee_id IS NULL;

#全外
USE girls;
SELECT b.*,bo.*
FROM beauty b
FULL OUTER JOIN boys bo
ON b.boyfriend_id = bo.id;

#交叉连接(笛卡尔乘积)
SELECT b.*,bo.*
FROM beauty b
CROSS JOIN boys bo;

#sql192 和sql199pk
功能：sql199支持的较多
可读性：sql199实现连接条件和筛选条件的分离，可读性较高
















