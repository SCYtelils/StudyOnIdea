#进阶2：条件查询
/*

语法：
SELECT 查询列表 FROM 表名 WHERE 筛选条件;

分类：
一、按条件表达式筛选
二、按逻辑表达式筛选
三、模糊查询
		LIKE
		BETWEEN AND
		in
		IS NULL
*/

#一、按条件表达式筛选

#案例一：查询工资》12000的员工信息
SELECT * FROM employees WHERE salary>12000;

#案例二：查询部门编号不等于90号的员工名和部门编号
SELECT last_name,department_id FROM employees WHERE department_id!=90;
SELECT last_name,department_id FROM employees WHERE department_id<>90;

#二、按逻辑表达式筛选

#案例一：查询工资在10000到20000之间的员工名、工资以及奖金
SELECT
				last_name,
				salary,
				commission_pct
FROM
				employees;
WHERE
				salary>=10000 AND salary<=20000;
#案例二：查询部门编号不是在90到110之间，或者工资高于15000的员工信息
SELECT
				*
FROM
				employees
WHERE
				NOT(department_id<90 OR department_id>110) OR salary>15000;

#三、模糊查询
/*
		LIKE
		BETWEEN AND
		in
		IS NULL
		IS NOT NULL
*/

#1.LIKE
/*
特点：
1）一般和通配符搭配使用
	通配符：
		% 任意多个字符，包含0个字符
		_ 任意单个字符
*/

#案例1：查询员工名中包含字符a的员工信息
SELECT * FROM employees where last_name LIKE '%a%';

#案例2：查询员工名中第三个字符为e，第五个字符为a的员工名和工资
SELECT
				last_name,
				salary
FROM
				employees
WHERE
				last_name LIKE '___e_a%';

#案例3：查询员工名中第二个字符为_的员工名
SELECT last_name FROM employees WHERE last_name LIKE '_\_%';
SELECT last_name FROM employees WHERE last_name LIKE '_$_%' ESCAPE '$';

#2.BETWEEN AND
/*
1）使用between and 可以提高语句的简洁度
2）包含临界值
3）两个临界值不要调换顺序
*/

#案例一：查询员工编号在100到120之间的员工信息
SELECT * FROM employees WHERE
employee_id BETWEEN 100 AND 200;

#3.in
/*
含义：判断某字段的值是否属于in列表中的某一项
特点：
1）使用in提高语句简洁度
2）in列表的值类型必须一致或兼容
*/
#案例： 查询员工的工种编号是 IT_PROG、AD_VIP、AD_PRES中的一个员工名和工种编号
SELECT
				last_name,
				job_id
FROM
				employees
WHERE
				job_id IN('IT_PROT','AD_VIP','AD_PRES');

#4.IS NULL
/*
=或<>不能用于判断null值
is null或is NOT null 可以判断null值
*/

#案例1：查询没有奖金的员工名和奖金率
SELECT
				last_name,
				commission_pct
FROM
				employees
WHERE
				commission_pct IS NULL;

#安全等于 <=>

#案例1：查询没有奖金的员工名和奖金率
SELECT
				last_name,
				commission_pct
FROM
				employees
WHERE
				commission_pct <=> NULL;

#案例2：查询工资为12000的员工信息
SELECT
				last_name,
				salary
FROM
				employees
WHERE
				salary <=> 12000;

#IS NULL 和 <=>
IS NULL:仅仅可以判断null值，可读性较高，建议使用
<=>    :既可以判断null值，又可以判断普通的数值，可读性较低。


#进阶3：排序查询
/*
语法：
			SELECT 查询列表
			FROM 表
			(WHERE 筛选条件)
			ORDER BY 排序列表 (ASC|DESC)
特点：
			1.asc代表的是升序，desc代表的屎降序
			如果不写，默认是升序
			2.ORDER BY子句种可以支持单个字段、多个字段、表达式、函数、别名
			3.ORDER BY子句一般是放在查询语句的最后面，limit子句除外
*/

#案例1：查询员工信息，要求工资从高到低排序
SELECT * FROM employees ORDER BY salary DESC;
SELECT * FROM employees ORDER BY salary ;

#案例2：查询部门编号>=90的员工信息，按入职时间的先后进行排序【添加筛选条件】
SELECT *
FROM employees
WHERE department_id>=90
ORDER BY hiredate asc;

#案例3：按年薪的高低显示员工的信息和年薪【按表达式排序】
SELECT * ,salary*12*(1+IFNULL(commission_pct,0)) as 年薪
FROM employees
ORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;


#案例4：按年薪的高低显示员工的信息和年薪【按别名排序】
SELECT * ,salary*12*(1+IFNULL(commission_pct,0)) as 年薪
FROM employees
ORDER BY 年薪 DESC;

#案例5：按姓名的长度显示员工的姓名和工资【按函数排序】
SELECT LENGTH(last_name) as 字节长度，last_name,salary
FROM employees
ORDER BY LENGTH(last_name) DESC;

#案例6：查询员工信息，要求先按工资升序，载按员工编号降序【按多个字段排序】
/*
描述，先按照工资升序排序，然后工资等同的按照员工编号降序排序
*/
SELECT *
FROM employees
ORDER BY salary ASC,employee_id DESC;













